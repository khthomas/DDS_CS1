for(x in unique(df$major_category)) {
summation = length(df$major_category[df$major_category == x])
paste0("major is: " + x + "count is: " + summation)
}
sum(df$major_category[df$major_category=="Arts"])
df$major_category[df$major_category=="Arts"]
df$major_category=="Arts"
sum(df$major_category=="Arts")
for(x in unique(df$major_category)) {
summation = sum(df$major_category == x)
paste0("major is: " + x + "count is: " + summation)
}
?string
??string
for(x in unique(df$major_category)) {
summation = sum(df$major_category == x)
paste0("major is: " + toString(x) + "count is: " + summation)
}
?dply
?dplyr
library(dplyr)
?dplyr
#install fivethirtyeight package
install.packages("fivethirtyeight")
#load the library
library(fivethirtyeight)
#load the data
five38 = data(package="fivethirtyeight")
#get 18th item
five38$results[18,"Item"]
data("college_recent_grads")
df = data.frame(college_recent_grads)
#find the URL of the related news story
vignette(package = "fivethirtyeight")
paste0("The URL for the package is: http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
#give dimensions and column names of  the data
str(df)
major_count = data.frame(mjr, cnt)
#get the column names
colnames(df)
#count the column names
length(colnames(df))
#find unique major categories, then count them
unique(df$major_category)
test = sapply(df$major_category,function(x) sum(df$major_category == x))
mjr = data.frame(unique(names(test)))
cnt = data.frame(unique(test))
major_count = data.frame(mjr, cnt)
length(mjr)
mjr
nrow(mjr)
nrow(cnt)
cnt
test
summary(test)
mode(test)
teast
test
test["Arts"]
test["Arts"][1]
test["Arts"][,1]
test["Arts"][0]
test["Arts"][1]
test["Arts"][1,]
test["Arts"][1:1]
x = list()
x
my_func = function() {
uni_major = unique(df$major_category)
major_count = data.frame()
for (x in uni_major) {
count = sum(df$major_category == x)
new_row = data.frame(major = x, numStudents =  count)
major_count = rbind(major_count, new_row)
}
return(major_count)
}
my_func()
major_count = data.frame()
my_func = function() {
uni_major = unique(df$major_category)
for (x in uni_major) {
count = sum(df$major_category == x)
new_row = data.frame(major = x, numStudents =  count)
major_count = rbind(major_count, new_row)
}
return(major_count)
}
my_func()
View(major_count)
uni_major = unique(df$major_category)
uni_major = unique(df$major_category)
major_count = data.frame()
for (x in uni_major) {
count = sum(df$major_category == x)
new_row = data.frame(major = x, numStudents =  count)
major_count = rbind(major_count, new_row)
}
View(major_count)
View(major_count)
class(major_count)
length(df$major_category)
sum(major_count$numStudents)
vignette("fivethirtyeight")
df
par(las=2)
plot(major_count, main="Number of Major's by Category", xlab= "Major", ylab = "count", color="blue")
barplot(major_count, main="Number of Major's by Category", xlab= "Major", ylab = "count", color="blue")
barplot(major_count, main="Number of Major's by Category", ylab = "count", color="blue")
barplot(major_count, main="Number of Major's by Category", ylab = "Count", color="blue")
barplot(major_count)
plot(major_count)
class(major_count$numStudents)
barplot(major_count$major, major_count$numStudents main="Number of Major's by Category", ylab = "Count", color="blue")
barplot(major_count$major, major_count$numStudents, main="Number of Major's by Category", ylab = "Count", color="blue")
?barplot
barplot(major_count$numStudents, major_count$major, main="Number of Major's by Category", ylab = "Count", color="blue")
barplot(major_count$numStudents, major_count$major, main="Number of Major's by Category", ylab = "Count")
barplot(major_count$numStudents, major_count$major)
barplot(major_count$numStudents)
par(las=2)
barplot(major_count$numStudents, xlab = major_count$major)
par(las=2)
barplot(major_count$numStudents, xlab = major_count$major)
par(las=2)
barplot(major_count$numStudents, ylab = "Count")
barplot(major_count$numStudents, major_count$major, ylab = "Count")
barplot(major_count$numStudents, ylab = "Count")
?plot
plot(major_count$major, major_count$numStudents, type="p")
plot(major_count$major, major_count$numStudents, type="l")
plot(major_count$major, major_count$numStudents, type="b")
library(plyr)
?plyr
#load the library
library(fivethirtyeight)
#load the data
five38 = data(package="fivethirtyeight")
#get 18th item
five38$results[18,"Item"]
data("college_recent_grads")
df = data.frame(college_recent_grads)
#find the URL of the related news story
vignette(package = "fivethirtyeight")
paste0("The URL for the package is: http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
#give dimensions and column names of  the data
str(df)
#2A
#get the column names
colnames(df)
#count the column names
length(colnames(df))
#2B find unique major categories, then count them, try it the elegant way
test = sapply(df$major_category,function(x) sum(df$major_category == x))
library(plyr)
#2B - give up and brute force it
uni_major = unique(df$major_category)
major_count = data.frame()
for (x in uni_major) {
count = sum(df$major_category == x)
new_row = data.frame(major = x, numDegree =  count)
major_count = rbind(major_count, new_row)
}
#2C Plot the data
par(las=2)
barplot(major_count$numStudents, ylab = "Count")
count(df$major_category)
major_count = count(df$major_category)
major_count
class(major_count)
major_count$freq
sum(major_count$freq)
par(las=2)
barplot(major_count, ylab = "Count")
barplot(major_count$freq, ylab = "Count")
?barplot
barplot(major_count$freq, names = major_count$x, ylab = "Count")
par(las=2)
barplot(major_count$freq, names = major_count$x, ylab = "Count")
> barplot(major_count$freq, names = major_count$x, ylab = "Count")
barplot(major_count$freq, names = major_count$x, ylab = "Count")
par(las=2)
barplot(major_count$freq, names = major_count$x, ylab = "Count")
vignette("fivethirtyeight")
par(las=2)
barplot(major_count$freq, names = major_count$x, ylab = "Count", xlab = "Major Category", main = "Number of College Major's by Category")
barplot(major_count$freq, names = major_count$x, ylab = "Count", xlab = "Major Category", main = "Number of College Majors by Category")
?barplot
par(las=2)
barplot(major_count$freq, names = major_count$x, ylab = "Count", xlab = "Major Category", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
par(las=2)
barplot(major_count$freq, names = major_count$x, ylab = "Major Category", xlab = "County", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
?write.csv
write.csv(df, "C:\\Users\\kthomas\\Documents\\SMU\\MSDS6306 - Doing Data Science\\Unit_4\\Download_homework\\")
write.csv(df, "C:\\Users\\kthomas\\Documents\\SMU\\MSDS6306 - Doing Data Science\\Unit_4\\Download_homework")
write.csv(df, "C:\\Users\\kthomas\\Documents\\SMU\\MSDS6306 - Doing Data Science\\Unit_4\\Download_homework\\major_count.csv")
df
head(df)
write.csv(df, "C:\\Users\\kthomas\\Documents\\SMU\\MSDS6306 - Doing Data Science\\Unit_4\\Download_homework\\recent_college_grads_538.csv", row.names = FALSE)
#load the library
library(fivethirtyeight)
#load the data
five38 = data(package="fivethirtyeight")
#get 18th item
five38$results[18,"Item"]
data("college_recent_grads")
df = data.frame(college_recent_grads)
#find the URL of the related news story
vignette(package = "fivethirtyeight")
paste0("The URL for the package is: http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
#give dimensions and column names of  the data
str(df)
#2A
#get the column names
colnames(df)
#count the column names
length(colnames(df))
#2B find unique major categories, then count them, try it the elegant way
test = sapply(df$major_category,function(x) sum(df$major_category == x))
library(plyr)
major_count = count(df$major_category)
#2B - give up and brute force it... used this before finding plyr
uni_major = unique(df$major_category)
major_count2 = data.frame()
for (x in uni_major) {
count = sum(df$major_category == x)
new_row = data.frame(major = x, numDegree =  count)
major_count = rbind(major_count, new_row)
}
#2A
#get the column names
colnames(df)
#count the column names
length(colnames(df))
#2B find unique major categories, then count them, try it the elegant way
test = sapply(df$major_category,function(x) sum(df$major_category == x))
library(plyr)
major_count = count(df$major_category)
#2B - give up and brute force it... used this before finding plyr
uni_major = unique(df$major_category)
major_count2 = data.frame()
for (x in uni_major) {
count = sum(df$major_category == x)
new_row = data.frame(major = x, numDegree =  count)
major_count2 = rbind(major_count, new_row)
}
#2A
#get the column names
colnames(df)
#count the column names
length(colnames(df))
#2B find unique major categories, then count them, try it the elegant way
test = sapply(df$major_category,function(x) sum(df$major_category == x))
library(plyr)
major_count = count(df$major_category)
#2B - give up and brute force it... used this before finding plyr
uni_major = unique(df$major_category)
major_count2 = data.frame()
for (x in uni_major) {
count = sum(df$major_category == x)
new_row = data.frame(major = x, numDegree =  count)
major_count2 = rbind(major_count2, new_row)
}
#2C Plot the data
par(las=2)
barplot(major_count$freq, names = major_count$x, ylab = "Major Category", xlab = "County", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
#2D Export data to csv
write.csv(df, "C:\\Users\\kthomas\\Documents\\SMU\\MSDS6306 - Doing Data Science\\Unit_4\\Download_homework\\recent_college_grads_538.csv", row.names = FALSE)
#load the library
library(fivethirtyeight)
#load the data
five38 = data(package="fivethirtyeight")
#get 18th item
five38$results[18,"Item"]
data("college_recent_grads")
df = data.frame(college_recent_grads)
#find the URL of the related news story
vignette(package = "fivethirtyeight")
paste0("The URL for the package is: http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/")
#give dimensions and column names of  the data
str(df)
?barplot
#install fivethirtyeight package
#install.packages("fivethirtyeight")
par(las=1)
barplot(major_count$freq, names = major_count$x, ylab = "Major Category", xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
par(las=2)
barplot(major_count$freq, names = major_count$x, ylab = "Major Category", xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
par(las=1)
barplot(major_count$freq, names = major_count$x, ylab = "Major Category", xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
barplot(major_count$freq, names = major_count$x, xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
par(las=2)
barplot(major_count$freq, names = major_count$x, xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
par(las=1)
barplot(major_count$freq, names = major_count$x, xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
par(las=2)
barplot(major_count$freq, names = major_count$x, xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE)
par(las=2)
barplot(major_count$freq, names = major_count$x, xlab = "Count", main = "Number of College Majors by Category", col="blue", horiz = TRUE, xpd = FALSE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
setwd ("~\\DDS_CS1")
setwd ("~\DDS_CS1")
setwd ("~\\DDS_CS1")
setwd ("C:\Users\kthomas\Documents\SMU\DDS_CS1")
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1")
getwd()
getwd() + "/Data"
c(getwd() + "/Data")
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
getwd()
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
breweries <- read.csv(file = "Breweries.csv", sep=",", header=TRUE)
#head(beers)
kable(head(beers), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
ls
list.files()
getwd()
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
getwd()
list.files()
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
beers = read.csv("Beers.csv")
beers
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
getwd()
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
breweries <- read.csv(file = "Breweries.csv", sep=",", header=TRUE)
#head(beers)
kable(head(beers), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#head(breweries)
kable(head(breweries), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
test = read.csv(url("https://raw.githubusercontent.com/jakevdp/PythonDataScienceHandbook/master/notebooks/data/state-population.csv"))
test
usPopRaw = read.csv(url("https://raw.githubusercontent.com/jakevdp/PythonDataScienceHandbook/master/notebooks/data/state-population.csv"))
uspop = read.csv("uspop.csv")
getwd()
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
breweries <- read.csv(file = "Breweries.csv", sep=",", header=TRUE)
#Bring in additional population data. Via Us Cencus (https://www.census.gov/data/tables/2016/demo/popest/state-total.html)
uspop = read.csv("uspop.csv")
#head(beers)
kable(head(beers), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#head(breweries)
kable(head(breweries), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
View(uspop)
View(uspop)
library(plyr)
Statesum <- count(breweries, 'State')
Statesum <- Statesum[order(-Statesum$freq),]
colnames(Statesum) <- c("State", "Number of Breweries")
kable(Statesum, "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
colnames(breweries)[1] <- "Brewery_id"
beerandbrew <- merge(breweries, beers, by=c("Brewery_id"), all= FALSE)
colnames(beerandbrew)[2] <- "Brewery"
colnames(beerandbrew)[5] <- "Beer"
#head(beerandbrew)
kable(head(beerandbrew), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#tail(beerandbrew)
kable(tail(beerandbrew), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#colSums(is.na(beerandbrew))
kable(colSums(is.na(beerandbrew)), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
library("reshape2")
abvandibu <- aggregate(beerandbrew[, 7:8], list(beerandbrew$State), median, na.rm=TRUE)
abvandibu$ABV = abvandibu$ABV*100
abvandibumelt <- melt(abvandibu, id=c("Group.1"))
abvandibumelt <-abvandibumelt[order(-abvandibumelt$variable),]
colnames(abvandibumelt) <- c("State", "ABVIBU", "Value")
ABVMED <- abvandibumelt[abvandibumelt$ABVIBU == "ABV", ]
IBUMED <- abvandibumelt[abvandibumelt$ABVIBU == "IBU", ]
library("ggplot2")
qplot(x=State, data=ABVMED, geom ="bar", weight = Value, fill = Value, ylab = 'Median ABV') + coord_flip()
qplot(x=State, data=IBUMED, geom ="bar", weight=Value, fill = Value, ylab = 'IBU Median') + coord_flip()
maxabv <- beerandbrew[which.max(beerandbrew$ABV),]
#maxabv$State
kable(maxabv$State, "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
maxibu <- beerandbrew[which.max(beerandbrew$IBU),]
#maxibu$State
kable(maxibu$State, "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
sumtable <- summary(beerandbrew$ABV)
Statistics <- c("Min.", "1st Qu.",  "Median", "Mean", "3rd Qu.", "Max.", "NA's" )
Values <- c(sumtable[1], sumtable[2],  sumtable[3], sumtable[4], sumtable[5], sumtable[6], sumtable[7] )
sumdf <- data.frame(Statistics, Values)
kable(sumdf[2], "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
scatter.smooth(beerandbrew$ABV, beerandbrew$IBU, ylab = "IBU",
xlab = "ABV", col= 4, main = "ABV vs IBU")
ggScatter = ( ggplot(dfMerge, aes(x=IBU, y=ABV)) + geom_point() +
labs(title="IBU vs ABV") + theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth())
ggScatter = ( ggplot(beerandbrew, aes(x=IBU, y=ABV)) + geom_point() +
labs(title="IBU vs ABV") + theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth())
ggScatter = ( ggplot(beerandbrew, aes(x=IBU, y=ABV)) + geom_point() +
labs(title="IBU vs ABV") + theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth())
ggScatter
View(uspop)
View(uspop)
View(beerandbrew)
View(beerandbrew)
getwd()
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
breweries <- read.csv(file = "Breweries.csv", sep=",", header=TRUE)
#Bring in additional population data. Via Us Cencus (https://www.census.gov/data/tables/2016/demo/popest/state-total.html)
uspop = read.csv("uspop.csv")
colnames(uspop) = c("State_Name, State, pop2016")
#head(beers)
kable(head(beers), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#head(breweries)
kable(head(breweries), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
getwd()
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
breweries <- read.csv(file = "Breweries.csv", sep=",", header=TRUE)
#Bring in additional population data. Via Us Cencus (https://www.census.gov/data/tables/2016/demo/popest/state-total.html)
uspop = read.csv("uspop.csv")
colnames(uspop) = c("State_Name", "State", "pop2016")
#head(beers)
kable(head(beers), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#head(breweries)
kable(head(breweries), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
beerandbrew = merge(beerandbrew, uspop, by = "State")
getwd()
setwd ("C:\\Users\\kthomas\\Documents\\SMU\\DDS_CS1\\Data")
beers <- read.csv(file = "Beers.csv", sep=",", header=TRUE)
breweries <- read.csv(file = "Breweries.csv", sep=",", header=TRUE)
#Bring in additional population data. Via Us Cencus (https://www.census.gov/data/tables/2016/demo/popest/state-total.html)
uspop = read.csv("uspop.csv")
colnames(uspop) = c("State_Name", "State", "pop2016")
#head(beers)
kable(head(beers), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#head(breweries)
kable(head(breweries), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
colnames(breweries)[1] <- "Brewery_id"
beerandbrew <- merge(breweries, beers, by=c("Brewery_id"), all= FALSE)
colnames(beerandbrew)[2] <- "Brewery"
colnames(beerandbrew)[5] <- "Beer"
#head(beerandbrew)
kable(head(beerandbrew), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#tail(beerandbrew)
kable(tail(beerandbrew), "html", padding = 2, longtable = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#Merge us population with main dataframe
test = merge(beerandbrew, uspop, by = "State")
View(test)
View(test)
beerandbrew = merge(beerandbrew, uspop, by = "State")
View(maxabv)
View(abvandibu)
needBeer = merge(abvandibu, uspop, by="State")
colname(abvandibu) = c("State", "ABV", "IBU")
colnames(abvandibu) = c("State", "ABV", "IBU")
needBeer = merge(abvandibu, uspop, by="State")
needBeer["combined"]= needBeer$IBU*needBeer$ABV
View(needBeer)
View(needBeer)
beerandbrew = merge(beerandbrew, uspop)
sort(needBeer,needBeer$combined)
tail([order(needBeer$combined)],10)
tail(needbeer[order(needBeer$combined)],10)
#Merge us population with main dataframe
beerandbrew = merge(beerandbrew, uspop, by = "State")
#We need a way to compare IBU and ABV at the same time. This can be done by simply multiplying together
#IBU and ABV to make a combined measure.
colnames(abvandibu) = c("State", "ABV", "IBU")
needBeer = merge(abvandibu, uspop, by="State")
needBeer["combined"]= needBeer$IBU*needBeer$ABV
tail(needbeer[order(needBeer$combined)],10)
tail(needBeer[order(needBeer$combined)],10)
tail(needBeer[order(needBeer$combined),],10)
head(needBeer[order(needBeer$combined),],10)
mostneeded = head(needBeer[order(needBeer$combined),],10)
#Merge us population with main dataframe
beerandbrew = merge(beerandbrew, uspop, by = "State")
#We need a way to compare IBU and ABV at the same time. This can be done by simply multiplying together
#IBU and ABV to make a combined measure.
colnames(abvandibu) = c("State", "ABV", "IBU")
needBeer = merge(abvandibu, uspop, by="State")
needBeer["combined"]= needBeer$IBU*needBeer$ABV
mostneeded = head(needBeer[order(needBeer$combined),],10)
needAndPop = tail(mostneeded[order(mostneeded$pop2016),],3)
needAndPop
